module decod(input [3:0] in1, output reg[6:0] out1);

always@(in1) begin
  case(in1)
    0: begin
	   out1 = [0, 1, 1, 1, 1, 1, 1];
    end
	 1: begin
	   out1 = [0, 0, 0, 0, 1, 1, 0];
	 end
	 2: begin
	   out1 = [1, 0, 1, 1, 0, 1, 1];
	 end
	 3: begin
	   out1 = [1, 0, 0, 1, 1, 1, 1];
	 end
	 4: begin
	   out1 = [1, 1, 0, 0, 1, 1, 0];
	 end
	 5: begin
	   out1 = [1, 1, 0, 1, 1, 0, 1];
	 end
	 6: begin
	   out1 = [1, 1, 1, 1, 1, 0, 1];
	 end
	 7: begin
	   out1 = [1, 0, 0, 0, 1, 1, 1];
	 end
	 8: begin
	   out1 = [1, 1, 1, 1, 1, 1, 1];
	 end
	 9: begin
	   out1 = [1, 1, 0, 1, 1, 1, 1];
	 end
	 10: begin
	   out1 = [1, 1, 1, 0, 1, 1, 1];
	 end
	 11: begin
	   out1 = [1, 1, 1, 1, 1, 0, 0];
	 end
	 12: begin
	   out1 = [0, 1, 1, 1, 0, 0, 1];
	 end
	 13: begin
	   out1 = [1, 0, 1, 1, 1, 1, 0];
	 end
	 14: begin
	   out1 = [1, 1, 1, 1, 0, 0, 1];
	 end
	 15: begin
	   out1 = [1, 1, 1, 0, 0, 0, 1];
	 end
	 default: begin
	   out1 = [0, 0, 0, 0, 0, 0, 0];
	 end


   endcase
end
endmodule 